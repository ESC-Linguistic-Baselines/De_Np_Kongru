qqline(ldt$Length)
qqnorm(ldt$Mean_RT)
qqline(ldt$Mean_RT)
qqline(ldt$Mean_RT)
qqnorm(ldt$Mean_RT)
qqnorm(a)
qqline(a)
ggplot(ldt, aes(sample = Mean_RT)) + stat_qq()
a
shapiro.test(a)
plot(density(a))
a <-c(0,5,10)
plot(density(a))
shapiro.test(a)
shapiro.test(a)
plot(density(a))
plot(density(a))
a
a <-c(0,1,1,2,2,5,5,5,9,9,10,10,10)
a
plot(density(a))
shapiro.test(a)
data <- c(10.25, 12.81, 9.73, 11.62, 14.04, 8.95, 11.10, 12.39, 10.87, 13.52)
plot(density(data))
shapiro.test(data)
qqnorm(data)
qqline(data)
boxplot(ldt$Mean_RT, main = "Mean reaction times", ylab = "reaction time in ms")
boxplot(data)
data
hist(data)
plot(data)
plot(plot.density(data))
plot(density(data))
hist(data)
ldt[abs(normalize(ldt$Mean_RT, method = "mad")) >= 2.5,]
ldt[abs(normalize(data, method = "mad")) >= 2.5,]
dta
data
normalize(data)
frame <- data.frame(data)
frame
normalize(data)
normalize(data$frame)
data.col
mad_value <- mad(ldt)
ldt <- c(10.25, 12.81, 9.73, 11.62, 14.04, 8.95, 11.10, 12.39, 10.87, 13.52)
mad_value <- mad(ldt)
mad_value
normalized_data <- abs(ldt - median(ldt)) / mad_value
outliers <- ldt[abs(normalized_data) >= 2.5]
outliers
outliers <- ldt[abs(normalized_data) >= 1]
outliers
ldt[abs(normalize(ldt, method = "mad")) >= 2.5,]
normalize(data)
d
data
data
normalize(data)
a
normalize(a)
normalize(ldt$Mean_RT)
ldt
ldt
ldt
library(Rling); library(modeest)
ldt
data(ldt)
ldt
normalize(ldt$Mean_RT)
a <- c(10.25, 12.81, 9.73, 11.62, 14.04, 8.95, 11.10, 12.39, 10.87, 13.52)
mad(a)
normalize(a)
a
norm <- normalize(a)
mean(norm)
mean(a)
norm
mean(a)
mean(norm)
var(norm)
var(a)
norm
which(norm > =4)
which(norm >= 0.1)
which(a >= 0.1)
a
a
which(a >= 4)
which(a > 4)
print(test.split())
print(strsplit(test))
test <- "this is who we are"
print(strsplit(test))
print(strsplit(test, split=" "))
a <- (0,4,4,23,33)
a <- c(0,4,4,23,33)
normalize(a)
normalize()
scale(a)
qqnorm(a)
qqline(a)
shapiro.test(a)
normlaize()
normalize()
library(ggplot2)
normalize()
library(Rling); library(modeest)
library(Rling); library(modeest)
normalize()
library(ggplot2)
library(Rling);
library(ggplot2)
data(sent)
str(sent)
# Define the data
data <- data.frame(
Category = c("French", "English"),
A1 = c(5, 15),
A2 = c(1, 1),
B1 = c(2, 11),
B2 = c(19, 9),
C1 = c(12, 10),
Gesamt = c(39, 46)
)
data
data*0.8
data[1]*0.8
data
data["French"]
# Display the data frame
print(data$A1*0.8)
# Display the data frame
print(data.col)
clear
data[,"French"]
data["French",]
data["French"]
# Define the data
data <- data.frame(
Category = c("French", "English"),
A1 = c(5, 15),
A2 = c(1, 1),
B1 = c(2, 11),
B2 = c(19, 9),
C1 = c(12, 10),
Gesamt = c(39, 46)
)
# Display the data frame
print(data)
data
data$Gesamt*0.8
round(w_sd, digits=4)
c = cbind(a,b)
a = c(1,2,3)
b = c(2,4,6)
c = cbind(a,b)
c
c*0.8
A1 = c(5, 15)
data
data*0.5
data = cbind(A1, A2, B1, B2, C1)
# Define the data
c("French", "English")
A1 = c(5, 15)
A2 = c(1, 1)
B1 = c(2, 11)
B2 = c(19, 9)
C1 = c(12, 10)
Gesamt = c(39, 46)
data = cbind(A1, A2, B1, B2, C1)
data
data*0.5
# Define the data
c("French", "English")
A1 -> c(5, 15)
A2 -> c(1, 1)
B1 -> c(2, 11)
B2 -> c(19, 9)
C1 -> c(12, 10)
#
data -> cbind(A1, A2, B1, B2, C1)
plot(data)
A1 <- c(5, 15)
A2 <- c(1, 1)
B1 <- c(2, 11)
B2 <- c(19, 9)
C1 <- c(12, 10)
# Create a data frame
data <- cbind(A1, A2, B1, B2, C1)
print(data)
B2 -> c(19, 9)
# Libraries bzw. R-Pakete
library("openxlsx")
library("readxl")
library("writexl")
# zusaetliche Funktionen
source("/dokumentation/evaluation/data_process.r")  # Replace with the actual file path
batch_results  <- "/Users/christopherchandler/repo/Python/computerlinguistik/de_np_kongru/user/outgoing/batch_results"
# Das lokale Verzeichnis festlegen, worin die Hauptergebnis-Datei gespeichert ist.
setwd(batch_results)
# Das lokale Verzeichnis festlegen, worin die Hauptergebnis-Datei gespeichert ist.
setwd(batch_results)
# +--------------------+-------------------------------------+
# | Arten              | Beispiel                            |
# +--------------------+-------------------------------------+
# | EINFACH            | Stadt                               |
# | ART                | Das Leben                           |
# | PREP               | Mit Kindern                         |
# | Rechtschreibfehler | Reche Pfliche*,Wiviel*              |
# | Eigennamen         | Katharina,Maria Meier               |
# | Redewendungen      | Liebe Julia,Mit freundlichen Grüßen |
# +--------------------+-------------------------------------+
#
# # Kongruenz
# Gruende, weswegen die Nominalphrase kongruiert
# +------+---------------------+
# | Code | Meaning             |
# +------+---------------------+
#  | 0   | EINFACH        |
# | 1    | ART                 |
# | 2    | PREP                |
# |3   | Eigennamen |
# | 4   | Redewendung bzw. gaengiger Satz           |
# +------+---------------------+
#
# # Nicht Kongruenz
#  Gruende, weswegen die Nominalphrase nicht kongruiert
# +------+-----------------------+
# | Code | Meaning               |
# +------+-----------------------+
#  | 10   | EINFACH        |
# | 11   | ART                   |
# | 12   | PREP                  |
# | 99   | Unbekannt             |
# +------+-----------------------+
#
#  # Unbekannt
# 99 - Aus unbekannten Gruenden konnte die Kongruenz nicht bestimmt werden.
# Es ist vermutlich irgendwo ein Fehler aufgetreten. Es kann auch sein
# das kein Kongruenz-Code zutreffend ist.
# Pakete installiert, wenn notwendig.
#install.packages("readxl")
#install.packages("writexl")
#install.packages("openxlsk")
# Libraries bzw. R-Pakete
library("openxlsx")
library("readxl")
library("writexl")
# Dateien und Ordner
batch_results  <- "/Users/christopherchandler/repo/Python/computerlinguistik/de_np_kongru/user/outgoing/batch_results"
aux_functions <- "/Users/christopherchandler/repo/Python/computerlinguistik/de_np_kongru/dokumentation/speaker_evaluation/data_process.r"
dataset <- "/Users/christopherchandler/repo/Python/computerlinguistik/de_np_kongru/user/outgoing/batch_results/batch_evaluation_np.csv"
excel_file <- "/Users/christopherchandler/repo/Python/computerlinguistik/de_np_kongru/user/outgoing/batch_results/nominal_phrase_results.xlsx"
# Das lokale Verzeichnis festlegen, worin die Hauptergebnis-Datei gespeichert ist.
setwd(batch_results)
#/Users/christopherchandler/repo/Python/computerlinguistik/NP - Computerlinguistik/de_np_kongru/user/outgoing/batch_results
# zusaetliche Funktionen
source(aux_functions)  # Replace with the actual file path
# Datensatz laden
en_fr_data <- read.csv( file = dataset)
# Excel-Workbook aufstellen
wb <- createWorkbook()
table_type <- "Training"
# Anfaenger
# DataFrames pro Niveaustufe aufstellen
beginner <- en_fr_data[
en_fr_data$general_cefr=="A1" |
en_fr_data$general_cefr=="A2",
]
beginner_data <- collect_language_data(beginner, "Anfänger", table_type)
# Intermediaer bzw. Kompetent
intermediate <- en_fr_data[
en_fr_data$general_cefr=="B1" |
en_fr_data$general_cefr=="B2",
]
intermediate_data <- collect_language_data(intermediate, "Intermediär", table_type)
# Fortgeschritten
advanced <- en_fr_data[
en_fr_data$general_cefr=="C1",
]
advanced_data <- collect_language_data(advanced, "Fortgeschritten", table_type)
# Die verschiedene Gruppen miteinander vergleichen
general_cefr_data_results <- general_cefr_data(en_fr_data)
# Anfaenger
a1_en <- general_cefr_data_results$A1_EN_GESAMT_WAHR
a1_fr <- general_cefr_data_results$A1_FR_GESAMT_WAHR
a2_en <- general_cefr_data_results$A2_EN_GESAMT_WAHR
a2_fr <- general_cefr_data_results$A2_FR_GESAMT_WAHR
# Intermediaer
b1_en <- general_cefr_data_results$B1_EN_GESAMT_WAHR
b1_fr <- general_cefr_data_results$B1_FR_GESAMT_WAHR
b2_en <- general_cefr_data_results$B2_EN_GESAMT_WAHR
b2_fr <- general_cefr_data_results$B2_FR_GESAMT_WAHR
# Fortgeschritten
c1_en <- general_cefr_data_results$C1_EN_GESAMT_WAHR
c1_fr <- general_cefr_data_results$C1_FR_GESAMT_WAHR
a1_data <-generate_t_test_data(a1_en, a1_fr, group="A1")
a2_data <-generate_t_test_data(a2_en, a2_fr, group="A2")
b1_data <-generate_t_test_data(b1_en, b1_fr, group="B1")
b2_data <-generate_t_test_data(b2_en, b2_fr, group="B2")
c1_data <-generate_t_test_data(c1_en, c1_fr, group="C1")
data <- list(
a1_data$one,
a1_data$two,
a2_data$one,
a2_data$two,
b1_data$one,
b1_data$two,
b2_data$one,
b2_data$two,
c1_data$one,
c1_data$two
)
collect_data_scores(
data,
"statistical_data ",
"training"
)
true_averages <- list(
data.frame(
"A1_EN_AVG_WAHR" = mean(general_cefr_data_results$A1_EN_GESAMT_WAHR),
"A1_EN_AVG_FALSCH" = mean(general_cefr_data_results$A1_EN_GESAMT_FALSCH),
"A1_FR_AVG_UNBEKANNT" = mean(general_cefr_data_results$A1_FR_GESAMT_UNBEKANNT)
),
data.frame(
"A2_EN_AVG_WAHR" = mean(general_cefr_data_results$A2_EN_GESAMT_WAHR),
"A2_EN_AVG_FALSCH" = mean(general_cefr_data_results$A2_EN_GESAMT_FALSCH),
"A2_FR_AVG_UNBEKANNT" = mean(general_cefr_data_results$A2_FR_GESAMT_UNBEKANNT)
),
data.frame(
"B1_EN_AVG_WAHR" = mean(general_cefr_data_results$B1_EN_GESAMT_WAHR),
"B1_EN_AVG_FALSCH" = mean(general_cefr_data_results$B1_EN_GESAMT_FALSCH),
"B1_FR_AVG_UNBEKANNT" = mean(general_cefr_data_results$B1_FR_GESAMT_UNBEKANNT)
),
data.frame(
"B2_EN_AVG_WAHR" = mean(general_cefr_data_results$B2_EN_GESAMT_WAHR),
"B2_EN_AVG_FALSCH" = mean(general_cefr_data_results$B2_EN_GESAMT_FALSCH),
"B2_FR_AVG_UNBEKANNT" = mean(general_cefr_data_results$B2_FR_GESAMT_UNBEKANNT)
),
data.frame(
"C1_EN_AVG_WAHR" = mean(general_cefr_data_results$C1_EN_GESAMT_WAHR),
"C1_EN_AVG_FALSCH" = mean(general_cefr_data_results$C1_EN_GESAMT_FALSCH),
"C1_FR_AVG_UNBEKANNT" = mean(general_cefr_data_results$C1_FR_GESAMT_UNBEKANNT)
)
)
collect_data_scores(
true_averages,
"averages",
"training"
)
saveWorkbook(wb, file = excel_file, overwrite = TRUE)
dataset
View(dataset)
# +--------------------+-------------------------------------+
# | Arten              | Beispiel                            |
# +--------------------+-------------------------------------+
# | EINFACH            | Stadt                               |
# | ART                | Das Leben                           |
# | PREP               | Mit Kindern                         |
# | Rechtschreibfehler | Reche Pfliche*,Wiviel*              |
# | Eigennamen         | Katharina,Maria Meier               |
# | Redewendungen      | Liebe Julia,Mit freundlichen Grüßen |
# +--------------------+-------------------------------------+
#
# # Kongruenz
# Gruende, weswegen die Nominalphrase kongruiert
# +------+---------------------+
# | Code | Meaning             |
# +------+---------------------+
#  | 0   | EINFACH        |
# | 1    | ART                 |
# | 2    | PREP                |
# |3   | Eigennamen |
# | 4   | Redewendung bzw. gaengiger Satz           |
# +------+---------------------+
#
# # Nicht Kongruenz
#  Gruende, weswegen die Nominalphrase nicht kongruiert
# +------+-----------------------+
# | Code | Meaning               |
# +------+-----------------------+
#  | 10   | EINFACH        |
# | 11   | ART                   |
# | 12   | PREP                  |
# | 99   | Unbekannt             |
# +------+-----------------------+
#
#  # Unbekannt
# 99 - Aus unbekannten Gruenden konnte die Kongruenz nicht bestimmt werden.
# Es ist vermutlich irgendwo ein Fehler aufgetreten. Es kann auch sein
# das kein Kongruenz-Code zutreffend ist.
# Pakete installiert, wenn notwendig.
#install.packages("readxl")
#install.packages("writexl")
#install.packages("openxlsk")
# Libraries bzw. R-Pakete
library("openxlsx")
library("readxl")
library("writexl")
# Dateien und Ordner
batch_results  <- "/Users/christopherchandler/repo/Python/computerlinguistik/de_np_kongru/user/outgoing/batch_results"
aux_functions <- "/Users/christopherchandler/repo/Python/computerlinguistik/de_np_kongru/dokumentation/speaker_evaluation/data_process.r"
dataset <- "/Users/christopherchandler/repo/Python/computerlinguistik/de_np_kongru/user/outgoing/batch_results/batch_evaluation_np.csv"
excel_file <- "/Users/christopherchandler/repo/Python/computerlinguistik/de_np_kongru/user/outgoing/batch_results/nominal_phrase_results.xlsx"
# Das lokale Verzeichnis festlegen, worin die Hauptergebnis-Datei gespeichert ist.
setwd(batch_results)
#/Users/christopherchandler/repo/Python/computerlinguistik/NP - Computerlinguistik/de_np_kongru/user/outgoing/batch_results
# zusaetliche Funktionen
source(aux_functions)  # Replace with the actual file path
# Datensatz laden
en_fr_data <- read.csv( file = dataset)
# Excel-Workbook aufstellen
wb <- createWorkbook()
table_type <- "Training"
# Anfaenger
# DataFrames pro Niveaustufe aufstellen
beginner <- en_fr_data[
en_fr_data$general_cefr=="A1" |
en_fr_data$general_cefr=="A2",
]
beginner_data <- collect_language_data(beginner, "Anfänger", table_type)
# Intermediaer bzw. Kompetent
intermediate <- en_fr_data[
en_fr_data$general_cefr=="B1" |
en_fr_data$general_cefr=="B2",
]
intermediate_data <- collect_language_data(intermediate, "Intermediär", table_type)
# Fortgeschritten
advanced <- en_fr_data[
en_fr_data$general_cefr=="C1",
]
advanced_data <- collect_language_data(advanced, "Fortgeschritten", table_type)
# Die verschiedene Gruppen miteinander vergleichen
general_cefr_data_results <- general_cefr_data(en_fr_data)
# Anfaenger
a1_en <- general_cefr_data_results$A1_EN_GESAMT_WAHR
a1_fr <- general_cefr_data_results$A1_FR_GESAMT_WAHR
a2_en <- general_cefr_data_results$A2_EN_GESAMT_WAHR
a2_fr <- general_cefr_data_results$A2_FR_GESAMT_WAHR
# Intermediaer
b1_en <- general_cefr_data_results$B1_EN_GESAMT_WAHR
b1_fr <- general_cefr_data_results$B1_FR_GESAMT_WAHR
b2_en <- general_cefr_data_results$B2_EN_GESAMT_WAHR
b2_fr <- general_cefr_data_results$B2_FR_GESAMT_WAHR
# Fortgeschritten
c1_en <- general_cefr_data_results$C1_EN_GESAMT_WAHR
c1_fr <- general_cefr_data_results$C1_FR_GESAMT_WAHR
a1_data <-generate_t_test_data(a1_en, a1_fr, group="A1")
a2_data <-generate_t_test_data(a2_en, a2_fr, group="A2")
b1_data <-generate_t_test_data(b1_en, b1_fr, group="B1")
b2_data <-generate_t_test_data(b2_en, b2_fr, group="B2")
c1_data <-generate_t_test_data(c1_en, c1_fr, group="C1")
data <- list(
a1_data$one,
a1_data$two,
a2_data$one,
a2_data$two,
b1_data$one,
b1_data$two,
b2_data$one,
b2_data$two,
c1_data$one,
c1_data$two
)
collect_data_scores(
data,
"statistical_data ",
"training"
)
true_averages <- list(
data.frame(
"A1_EN_AVG_WAHR" = mean(general_cefr_data_results$A1_EN_GESAMT_WAHR),
"A1_EN_AVG_FALSCH" = mean(general_cefr_data_results$A1_EN_GESAMT_FALSCH),
"A1_FR_AVG_UNBEKANNT" = mean(general_cefr_data_results$A1_FR_GESAMT_UNBEKANNT)
),
data.frame(
"A2_EN_AVG_WAHR" = mean(general_cefr_data_results$A2_EN_GESAMT_WAHR),
"A2_EN_AVG_FALSCH" = mean(general_cefr_data_results$A2_EN_GESAMT_FALSCH),
"A2_FR_AVG_UNBEKANNT" = mean(general_cefr_data_results$A2_FR_GESAMT_UNBEKANNT)
),
data.frame(
"B1_EN_AVG_WAHR" = mean(general_cefr_data_results$B1_EN_GESAMT_WAHR),
"B1_EN_AVG_FALSCH" = mean(general_cefr_data_results$B1_EN_GESAMT_FALSCH),
"B1_FR_AVG_UNBEKANNT" = mean(general_cefr_data_results$B1_FR_GESAMT_UNBEKANNT)
),
data.frame(
"B2_EN_AVG_WAHR" = mean(general_cefr_data_results$B2_EN_GESAMT_WAHR),
"B2_EN_AVG_FALSCH" = mean(general_cefr_data_results$B2_EN_GESAMT_FALSCH),
"B2_FR_AVG_UNBEKANNT" = mean(general_cefr_data_results$B2_FR_GESAMT_UNBEKANNT)
),
data.frame(
"C1_EN_AVG_WAHR" = mean(general_cefr_data_results$C1_EN_GESAMT_WAHR),
"C1_EN_AVG_FALSCH" = mean(general_cefr_data_results$C1_EN_GESAMT_FALSCH),
"C1_FR_AVG_UNBEKANNT" = mean(general_cefr_data_results$C1_FR_GESAMT_UNBEKANNT)
)
)
collect_data_scores(
true_averages,
"averages",
"training"
)
saveWorkbook(wb, file = excel_file, overwrite = TRUE)
saveWorkbook(wb, file = excel_file, overwrite = TRUE)
wb
collect_data_scores
View(dataset)
dataset <- "/Users/christopherchandler/repo/Python/computerlinguistik/de_np_kongru/user/outgoing/batch_results/batch_evaluation_np.csv"
dataset <- "/Users/christophercharndler/repo/Python/computerlinguistik/de_np_kongru/user/outgoing/batch_results/batch_evaluation_np.csv"
dataset <- "/Users/christophercharndler/repo/Python/computerlinguistik/de_np_kongru/user/outgoing/batch_results/batch_evaluation_np.csv"
