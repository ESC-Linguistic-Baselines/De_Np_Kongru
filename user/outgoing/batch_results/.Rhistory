standard_error <- sd/sqrt(n)
df <- n - 1
t_value <- (x - null_hypothesis) / standard_error
critical_t <- qt(1-0.05,n)
print(t_value)
print(critical_t)
if (t_value < critical_t) {
print("H0")
} else {
print("H1")
}
x
critical_t <- qt(1-0.05/2,n)
critical_t
critical_t
critical_t <- qt(1-0.05,n)
critical_t
data <- c(19.5, 20.2, 20.8, 19.9, 20.5, 21.1, 19.7, 20.3, 20.1, 20.6)
car_mileage <- cbind(data)
alpha <- 0.05
null_hypothesis <- 20
n <- length(car_mileage)
x <- mean(car_mileage)
sd <- sd(car_mileage)
standard_error <- sd/sqrt(n)
df <- n - 1
t_value <- (x - null_hypothesis) / standard_error
critical_t <- qt(1-0.05/2,n)
print(t_value)
print(critical_t)
if (t_value < critical_t) {
print("H0")
} else {
print("H1")
}
data <- c(19.5, 20.2, 20.8, 19.9, 20.5, 21.1, 19.7, 20.3, 20.1, 20.6)
car_mileage <- cbind(data)
alpha <- 0.05
null_hypothesis <- 20
n <- length(car_mileage)
x <- mean(car_mileage)
sd <- sd(car_mileage)
standard_error <- sd/sqrt(n)
df <- n - 1
t_value <- (x - null_hypothesis) / standard_error
critical_t <- qt(1-0.05/2,n)
print(t_value)
print(critical_t)
if (t_value < critical_t) {
print("H0")
} else {
print("H1")
}
car_mileage <- c(19.5, 20.2, 20.8, 19.9, 20.5, 21.1, 19.7, 20.3, 20.1, 20.6)
null_hypothesis <- 20
result <- t.test(car_mileage, mu = null_hypothesis)
print(result)
critical_t
critical_t <- qt(1-0.05,n)
critical_t
result <- t.test(car_mileage, mu = null_hypothesis)
t_value
# Sample data
car_mileage <- c(19.5, 20.2, 20.8, 19.9, 20.5, 21.1, 19.7, 20.3, 20.1, 20.6)
# Set the null hypothesis
null_hypothesis <- 20
# Perform one-sample t-test
result <- t.test(car_mileage, mu = null_hypothesis)
# Print the result
print(result)
data <- c(23, 19, 22, 21, 20, 24, 18, 22, 21, 20)
car_mileage <- cbind(data)
alpha <- 0.05
null_hypothesis <- 20
n <- length(car_mileage)
x <- mean(car_mileage)
sd <- sd(car_mileage)
standard_error <- sd/sqrt(n)
df <- n - 1
t_value <- (x - null_hypothesis) / standard_error
critical_t <- qt(1-0.05/2,n)
print(t_value)
print(critical_t)
if (t_value < critical_t) {
print("H0")
} else {
print("H1")
}
if (t_value < critical_t) {
print("H0")
} else {
print("H1")
}
# Sample data
car_mileage <- c( 23, 19, 22, 21, 20, 24, 18, 22, 21, 20)
# Set the null hypothesis
null_hypothesis <- 20
# Perform one-sample t-test
result <- t.test(car_mileage, mu = null_hypothesis)
# Print the result
print(result)
data <- c(23, 19, 22, 21, 20, 24, 18, 22, 21, 20)
car_mileage <- cbind(data)
alpha <- 0.05
null_hypothesis <- 70
n <- length(car_mileage)
x <- mean(car_mileage)
sd <- sd(car_mileage)
standard_error <- sd/sqrt(n)
df <- n - 1
t_value <- (x - null_hypothesis) / standard_error
critical_t <- qt(1-0.05/2,n)
print(t_value)
print(critical_t)
if (t_value < critical_t) {
print("H0")
} else {
print("H1")
}
# Sample data
car_mileage <- c( 23, 19, 22, 21, 20, 24, 18, 22, 21, 20)
# Set the null hypothesis
null_hypothesis <- 7
# Perform one-sample t-test
result <- t.test(car_mileage, mu = null_hypothesis)
# Print the result
print(result)
data <- c(23, 19, 22, 21, 20, 24, 18, 22, 21, 20)
car_mileage <- cbind(data)
alpha <- 0.05
null_hypothesis <- 70
n <- length(car_mileage)
x <- mean(car_mileage)
sd <- sd(car_mileage)
standard_error <- sd/sqrt(n)
df <- n - 1
t_value <- (x - null_hypothesis) / standard_error
critical_t <- qt(1-0.05/2,n)
print(t_value)
print(critical_t)
if (t_value < critical_t) {
print("H0")
} else {
print("H1")
}
data <- c(23, 19, 22, 21, 20, 24, 18, 22, 21, 20)
car_mileage <- cbind(data)
alpha <- 0.05
null_hypothesis <- 70
n <- length(car_mileage)
x <- mean(car_mileage)
sd <- sd(car_mileage)
standard_error <- sd/sqrt(n)
df <- n - 1
t_value <- (x - null_hypothesis) / standard_error
critical_t <- qt(1-0.05/2,n)
print(t_value)
print(critical_t)
if (t_value < critical_t) {
print("H0")
} else {
print("H1")
}
critical_t
print(t_value)
data <- c(23, 19, 22, 21, 20, 24, 18, 22, 21, 20)
car_mileage <- cbind(data)
alpha <- 0.05
null_hypothesis <- 7
n <- length(car_mileage)
x <- mean(car_mileage)
sd <- sd(car_mileage)
standard_error <- sd/sqrt(n)
df <- n - 1
t_value <- (x - null_hypothesis) / standard_error
critical_t <- qt(1-0.05/2,n)
print(t_value)
print(critical_t)
if (t_value < critical_t) {
print("H0")
} else {
print("H1")
}
critical_t <- qt(1-0.05/2,n)
print(t_value)
print(critical_t)
# Sample data
car_mileage <- c( 23, 19, 22, 21, 20, 24, 18, 22, 21, 20)
# Set the null hypothesis
null_hypothesis <- 7
# Perform one-sample t-test
result <- t.test(car_mileage, mu = null_hypothesis)
# Print the result
print(result)
pie(1)
a -< c(1,2,3)
a <- c(1,2,3)
b <- (2,3,4)
b <- c(2,3,4)
c <- c(3,4,5)
data.frame(a,b,c)
pie(data)
data
data$a
data
install.packages("modeest")
library(Rling)
library(modeest)
data(ldt)
head(data)
data(ldt)
head(data)
ldt
data <- ldt
head(data)
str(data)
quantile(ldt$Length, 0.5)
quantile(ldt$Length, 0.75)
# Find general data
summary(ldt$Length)
mlv(ldth$length)
mlv(ldth$Length)
mlv(ldt$Length)
plot(density(ldt$Mean_RT), main = "Density plot of mean reaction times", xlab = "reaction times, ms")
ldt$Mean_RT
a <- c(0,44,33)
d <- data.frame(a)
plot(density(d))
plot(density(d))
d
plot(density(a))
ggplot(ldt, aes(x = 1:nrow(ldt), y = sort(Freq, decreasing = TRUE))) + geom_line() + geom_point() + xlab("Index") + ylab("Frequency")
hist(ldt$Mean_RT, main = "Histogram of mean reaction times", xlab = "reaction times, ms")
plot(density(ldt$Mean_RT), main = "Density plot of mean reaction times", xlab = "reaction times, ms")
a <-c(0,5,10)
plot(density(a))
a <-c(0,40,10)
plot(density(a))
a <-c(0,50,100)
plot(density(a))
a <-c(0,3,100)
plot(density(a))
a <-c(0,25,40,50,100)
plot(density(a))
a <-c(20,50,100)
plot(density(a))
plot(a)
plot(density(a))
plot(density(a))
plot(a)
a
plot(density(a))
plot(a)
> qqnorm(ldt$Mean_RT)
qqnorm(ldt$Mean_RT)
qqnorm(a)
plot(a)
qqnorm(a)
qqnorm(ldt$Mean_RT)
qqline(ldt$Length)
qqnorm(ldt$Mean_RT)
qqline(ldt$Mean_RT)
qqline(ldt$Mean_RT)
qqnorm(ldt$Mean_RT)
qqnorm(a)
qqline(a)
ggplot(ldt, aes(sample = Mean_RT)) + stat_qq()
a
shapiro.test(a)
plot(density(a))
a <-c(0,5,10)
plot(density(a))
shapiro.test(a)
shapiro.test(a)
plot(density(a))
plot(density(a))
a
a <-c(0,1,1,2,2,5,5,5,9,9,10,10,10)
a
plot(density(a))
shapiro.test(a)
data <- c(10.25, 12.81, 9.73, 11.62, 14.04, 8.95, 11.10, 12.39, 10.87, 13.52)
plot(density(data))
shapiro.test(data)
qqnorm(data)
qqline(data)
boxplot(ldt$Mean_RT, main = "Mean reaction times", ylab = "reaction time in ms")
boxplot(data)
data
hist(data)
plot(data)
plot(plot.density(data))
plot(density(data))
hist(data)
ldt[abs(normalize(ldt$Mean_RT, method = "mad")) >= 2.5,]
ldt[abs(normalize(data, method = "mad")) >= 2.5,]
dta
data
normalize(data)
frame <- data.frame(data)
frame
normalize(data)
normalize(data$frame)
data.col
mad_value <- mad(ldt)
ldt <- c(10.25, 12.81, 9.73, 11.62, 14.04, 8.95, 11.10, 12.39, 10.87, 13.52)
mad_value <- mad(ldt)
mad_value
normalized_data <- abs(ldt - median(ldt)) / mad_value
outliers <- ldt[abs(normalized_data) >= 2.5]
outliers
outliers <- ldt[abs(normalized_data) >= 1]
outliers
ldt[abs(normalize(ldt, method = "mad")) >= 2.5,]
normalize(data)
d
data
data
normalize(data)
a
normalize(a)
normalize(ldt$Mean_RT)
ldt
ldt
ldt
library(Rling); library(modeest)
ldt
data(ldt)
ldt
normalize(ldt$Mean_RT)
a <- c(10.25, 12.81, 9.73, 11.62, 14.04, 8.95, 11.10, 12.39, 10.87, 13.52)
mad(a)
normalize(a)
a
norm <- normalize(a)
mean(norm)
mean(a)
norm
mean(a)
mean(norm)
var(norm)
var(a)
norm
which(norm > =4)
which(norm >= 0.1)
which(a >= 0.1)
a
a
which(a >= 4)
which(a > 4)
print(test.split())
print(strsplit(test))
test <- "this is who we are"
print(strsplit(test))
print(strsplit(test, split=" "))
a <- (0,4,4,23,33)
a <- c(0,4,4,23,33)
normalize(a)
normalize()
scale(a)
qqnorm(a)
qqline(a)
shapiro.test(a)
normlaize()
normalize()
library(ggplot2)
normalize()
library(Rling); library(modeest)
library(Rling); library(modeest)
normalize()
library(ggplot2)
library(Rling);
library(ggplot2)
data(sent)
str(sent)
# Define the data
data <- data.frame(
Category = c("French", "English"),
A1 = c(5, 15),
A2 = c(1, 1),
B1 = c(2, 11),
B2 = c(19, 9),
C1 = c(12, 10),
Gesamt = c(39, 46)
)
data
data*0.8
data[1]*0.8
data
data["French"]
# Display the data frame
print(data$A1*0.8)
# Display the data frame
print(data.col)
clear
data[,"French"]
data["French",]
data["French"]
# Define the data
data <- data.frame(
Category = c("French", "English"),
A1 = c(5, 15),
A2 = c(1, 1),
B1 = c(2, 11),
B2 = c(19, 9),
C1 = c(12, 10),
Gesamt = c(39, 46)
)
# Display the data frame
print(data)
data
data$Gesamt*0.8
round(w_sd, digits=4)
c = cbind(a,b)
a = c(1,2,3)
b = c(2,4,6)
c = cbind(a,b)
c
c*0.8
A1 = c(5, 15)
data
data*0.5
data = cbind(A1, A2, B1, B2, C1)
# Define the data
c("French", "English")
A1 = c(5, 15)
A2 = c(1, 1)
B1 = c(2, 11)
B2 = c(19, 9)
C1 = c(12, 10)
Gesamt = c(39, 46)
data = cbind(A1, A2, B1, B2, C1)
data
data*0.5
# Define the data
c("French", "English")
A1 -> c(5, 15)
A2 -> c(1, 1)
B1 -> c(2, 11)
B2 -> c(19, 9)
C1 -> c(12, 10)
#
data -> cbind(A1, A2, B1, B2, C1)
plot(data)
A1 <- c(5, 15)
A2 <- c(1, 1)
B1 <- c(2, 11)
B2 <- c(19, 9)
C1 <- c(12, 10)
# Create a data frame
data <- cbind(A1, A2, B1, B2, C1)
print(data)
B2 -> c(19, 9)
# Libraries bzw. R-Pakete
library("openxlsx")
library("readxl")
library("writexl")
# Das lokale Verzeichnis festlegen, worin die Hauptergebnis-Datei gespeichert ist.
setwd("/Users/christopherchandler/repo/Python/computerlinguistik/de_np_kongru/user/outgoing/batch_results")
# zusaetliche Funktionen
source("/Users/christopherchandler/repo/Python/computerlinguistik/de_np_kongru/evaluation/data_process.r")  # Replace with the actual file path
# Datensatz laden
en_fr_data <- read.csv( file = "batch_evaluation_np.csv")
# Excel-Workbook aufstellen
wb <- createWorkbook()
table_type <- "Training"
# Anfaenger
# DataFrames pro Niveaustufe aufstellen
beginner <- en_fr_data[
en_fr_data$general_cefr=="A1" |
en_fr_data$general_cefr=="A2",
]
beginner_data <- collect_language_data(beginner, "AnfÃ¤nger", table_type)
# Intermediaer bzw. Kompetent
intermediate <- en_fr_data[
en_fr_data$general_cefr=="B1" |
en_fr_data$general_cefr=="B2",
]
intermediate_data <- collect_language_data(intermediate, "IntermediÃ¤r", table_type)
# Fortgeschritten
advanced <- en_fr_data[
en_fr_data$general_cefr=="C1",
]
advanced_data <- collect_language_data(advanced, "Fortgeschritten", table_type)
# Die verschiedene Gruppen miteinander vergleichen
general_cefr_data_results <- general_cefr_data(en_fr_data)
# Anfaenger
a1_en <- general_cefr_data_results$A1_EN_GESAMT_WAHR
a1_fr <- general_cefr_data_results$A1_FR_GESAMT_WAHR
a2_en <- general_cefr_data_results$A2_EN_GESAMT_WAHR
a2_fr <- general_cefr_data_results$A2_FR_GESAMT_WAHR
# Intermediaer
b1_en <- general_cefr_data_results$B1_EN_GESAMT_WAHR
b1_fr <- general_cefr_data_results$B1_FR_GESAMT_WAHR
b2_en <- general_cefr_data_results$B2_EN_GESAMT_WAHR
b2_fr <- general_cefr_data_results$B2_FR_GESAMT_WAHR
# Fortgeschritten
c1_en <- general_cefr_data_results$C1_EN_GESAMT_WAHR
c1_fr <- general_cefr_data_results$C1_FR_GESAMT_WAHR
print(a1_en)
print(a1_fr)
# Ergebnisse speichern
a1 <- t.test(a1_en, a1_fr)
a2 <- t.test(a2_en, a2_fr)
# Ergebnisse speichern
a1 <- t.test(a1_en, a1_fr)
# Ergebnisse speichern
a1 <- t.test(a1_en, a1_fr)
a2 <- t.test(a2_en, a2_fr)
b1 <- t.test(b1_en, b1_fr)
b2 <- t.test(b2_en, b2_fr)
c1 <- t.test(c1_en, c1_fr)
